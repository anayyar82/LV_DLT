-- -- ====================================================
-- -- Silver table - from_json on D with schema registry
-- -- ====================================================

-- CREATE OR REFRESH STREAMING TABLE silver_events_patient_data_scd2
-- (
--   PracticeID STRING,
--   Shard STRING,
--   DeviceTypeID STRING,
--   SerialNumber STRING,
--   PatientID STRING,
--   Created STRING,
--   CreatedBy STRING,
--   Updated STRING,
--   UpdatedBy STRING,
--   V STRING,
--   P STRING,

--   -- Flattened from D
--   D_id STRING,
--   D_name STRING,
--   D_address1 STRING,
--   D_address2 STRING,
--   D_city STRING,
--   D_state STRING,
--   D_zipCode STRING,
--   D_country STRING,
--   D_phoneNumber STRING,
--   D_businessId STRING,
--   D_private BOOLEAN,
--   D_created TIMESTAMP,
--   D_createdBy STRING,
--   D_updated TIMESTAMP,
--   D_updatedBy STRING,

--   processedTime TIMESTAMP
-- )
-- TBLPROPERTIES (
--   'delta.enableChangeDataFeed' = 'true',
--   'delta.enableDeletionVectors' = 'true',
--   'delta.enableRowTracking' = 'true',
--   'delta.feature.variantType-preview' = 'supported',
--   'quality' = 'silver'
-- );

-- CREATE FLOW silver_events_patient_data_cdc_scd2 AS AUTO CDC INTO
--   silver_events_patient_data_scd2
-- FROM (
--   WITH parsed AS (
--     SELECT
--       PracticeID,
--       Shard,
--       DeviceTypeID,
--       SerialNumber,
--       PatientID,
--       Created,
--       CreatedBy,
--       Updated,
--       UpdatedBy,
--       V,
--       P,

--       -- ✅ Parse D safely
--       from_json(
--         REPLACE(
--           REGEXP_REPLACE(
--             regexp_replace(substring(D, 2, length(D)-2), '""', '"'),
--             '[\\x00-\\x1F\\x7F]', ''
--           ),
--           '\\u0000', ''
--         ),
--         NULL,
--         map("schemaLocationKey", "silver_patient_schema123")
--       ) AS D_struct,

--       ingestTime,
--       _change_type,
--       _commit_version,
--       _commit_timestamp
--     FROM STREAM(patient_cdf)
--   )
--   SELECT
--     PracticeID,
--     Shard,
--     DeviceTypeID,
--     SerialNumber,
--     PatientID,
--     Created,
--     CreatedBy,
--     Updated,
--     UpdatedBy,
--     V,
--     P,

--     -- ✅ Flatten JSON fields
--     D_struct.id            AS D_id,
--     D_struct.name          AS D_name,
--     D_struct.address1      AS D_address1,
--     D_struct.address2      AS D_address2,
--     D_struct.city          AS D_city,
--     D_struct.state         AS D_state,
--     D_struct.zipCode       AS D_zipCode,
--     D_struct.country       AS D_country,
--     D_struct.phoneNumber   AS D_phoneNumber,
--     D_struct.businessId    AS D_businessId,
--     D_struct.private       AS D_private,
--     to_timestamp(D_struct.created::bigint)   AS D_created,
--     D_struct.createdBy     AS D_createdBy,
--     to_timestamp(D_struct.updated::bigint)   AS D_updated,
--     D_struct.updatedBy     AS D_updatedBy,

--     current_timestamp() AS processedTime,
--     _change_type,
--     _commit_version,
--     _commit_timestamp
--   FROM parsed
-- )
-- KEYS (PatientID, PracticeID)   -- adjust if natural keys are different
-- APPLY AS DELETE WHEN
--   _change_type = "delete"
-- SEQUENCE BY
--   (_commit_version, _commit_timestamp)
-- COLUMNS * EXCEPT
--   (_change_type, _commit_version, _commit_timestamp)
-- STORED AS
--   SCD TYPE 1;
